<?php declare(strict_types = 1);
//
// Generated by Smalldb\StateMachine\CodeGenerator\DtoGenerator.
// Do NOT edit! All changes will be lost!
// 
// 
namespace Smalldb\StateMachine\Test\Example\Post\PostData;

use DateTimeImmutable;
use InvalidArgumentException;
use Smalldb\StateMachine\CodeCooker\Annotation\GeneratedClass;
use Smalldb\StateMachine\Test\Example\Post\PostProperties as Source_PostProperties;


/**
 * @GeneratedClass
 * @see \Smalldb\StateMachine\Test\Example\Post\PostProperties
 */
class PostDataImmutable extends Source_PostProperties implements PostData
{

	public function __construct(?PostData $source = null)
	{
		if ($source !== null) {
			if ($source instanceof Source_PostProperties) {
				$this->id = $source->id;
				$this->title = $source->title;
				$this->slug = $source->slug;
				$this->summary = $source->summary;
				$this->content = $source->content;
				$this->publishedAt = $source->publishedAt;
				$this->authorId = $source->authorId;
				$this->commentCount = $source->commentCount;
			} else {
				$this->id = $source->getId();
				$this->title = $source->getTitle();
				$this->slug = $source->getSlug();
				$this->summary = $source->getSummary();
				$this->content = $source->getContent();
				$this->publishedAt = $source->getPublishedAt();
				$this->authorId = $source->getAuthorId();
				$this->commentCount = $source->getCommentCount();
			}
		}
	}


	public static function fromArray(array $source, ?PostData $sourceObj = null): self
	{
		$t = $sourceObj instanceof self ? clone $sourceObj : new self($sourceObj);
		$t->id = $source['id'];
		$t->title = $source['title'];
		$t->slug = $source['slug'];
		$t->summary = $source['summary'];
		$t->content = $source['content'];
		$t->publishedAt = $source['publishedAt'];
		$t->authorId = $source['authorId'];
		$t->commentCount = $source['commentCount'];
		return $t;
	}


	public static function fromIterable(?PostData $sourceObj, iterable $source, ?callable $mapFunction = null): self
	{
		$t = $sourceObj instanceof self ? clone $sourceObj : new self($sourceObj);
		foreach ($source as $prop => $value) {
			switch ($prop) {
				case 'id': $t->id = $mapFunction ? $mapFunction($value) : $value; break;
				case 'title': $t->title = $mapFunction ? $mapFunction($value) : $value; break;
				case 'slug': $t->slug = $mapFunction ? $mapFunction($value) : $value; break;
				case 'summary': $t->summary = $mapFunction ? $mapFunction($value) : $value; break;
				case 'content': $t->content = $mapFunction ? $mapFunction($value) : $value; break;
				case 'publishedAt': $t->publishedAt = $mapFunction ? $mapFunction($value) : $value; break;
				case 'authorId': $t->authorId = $mapFunction ? $mapFunction($value) : $value; break;
				case 'commentCount': $t->commentCount = $mapFunction ? $mapFunction($value) : $value; break;
				default: throw new InvalidArgumentException('Unknown property: "' . $prop . '" not in ' . __CLASS__);
			}
		}
		return $t;
	}


	public function getId(): ?int
	{
		return $this->id;
	}


	public function getTitle(): string
	{
		return $this->title;
	}


	public function getSlug(): string
	{
		return $this->slug;
	}


	public function getSummary(): string
	{
		return $this->summary;
	}


	public function getContent(): string
	{
		return $this->content;
	}


	public function getPublishedAt(): DateTimeImmutable
	{
		return $this->publishedAt;
	}


	public function getAuthorId(): int
	{
		return $this->authorId;
	}


	public function getCommentCount(): ?int
	{
		return $this->commentCount;
	}


	public static function get(PostData $source, string $propertyName)
	{
		switch ($propertyName) {
			case 'id': return $source->getId();
			case 'title': return $source->getTitle();
			case 'slug': return $source->getSlug();
			case 'summary': return $source->getSummary();
			case 'content': return $source->getContent();
			case 'publishedAt': return $source->getPublishedAt();
			case 'authorId': return $source->getAuthorId();
			case 'commentCount': return $source->getCommentCount();
			default: throw new \InvalidArgumentException("Unknown property: " . $propertyName);
		}
	}


	public function withId(?int $id): self
	{
		$t = clone $this;
		$t->id = $id;
		return $t;
	}


	public function withTitle(string $title): self
	{
		$t = clone $this;
		$t->title = $title;
		return $t;
	}


	public function withSlug(string $slug): self
	{
		$t = clone $this;
		$t->slug = $slug;
		return $t;
	}


	public function withSummary(string $summary): self
	{
		$t = clone $this;
		$t->summary = $summary;
		return $t;
	}


	public function withContent(string $content): self
	{
		$t = clone $this;
		$t->content = $content;
		return $t;
	}


	public function withPublishedAt(DateTimeImmutable $publishedAt): self
	{
		$t = clone $this;
		$t->publishedAt = $publishedAt;
		return $t;
	}


	public function withAuthorId(int $authorId): self
	{
		$t = clone $this;
		$t->authorId = $authorId;
		return $t;
	}


	public function withCommentCount(?int $commentCount): self
	{
		$t = clone $this;
		$t->commentCount = $commentCount;
		return $t;
	}

}

